
type opt 'a = None | Some 'a
  options "ocaml.type_equals" = "option"

type keyspace = int

type max_keys = opt<int>
type max_columns = max_keys
type decode_timestamps = bool

type key = string
type column_name = string

type table = string
  options "ocaml.type" = "Obs_data_model.table, Obs_data_model.table_of_string, Obs_data_model.string_of_table"

type range 'a =
    { 
      first : opt<'a>;
      up_to : opt<'a>;
      reverse : bool;
    }
  options "ocaml.type_equals" = "Obs_data_model.range"

type key_range =
    Key_range range<string>
  | Keys [string]

type simple_column_range =
    Columns [string]
  | Column_range range<string>

type column_range =
    All_columns
  | Column_range_union [simple_column_range]

type timestamp = No_timestamp | Timestamp long
  options "ocaml.type_equals" = "Obs_data_model.timestamp"

type column 'a =
  { name : column_name; data : 'a; timestamp : timestamp; }
  options "ocaml.type_equals" = "Obs_data_model.column"

message column_ = column<string>

type column_val_rel =
    Any
  | EQ string | LT string | GT string
  | GE string | LE string
  | Between string bool string bool
  options "ocaml.type_equals" = "Obs_data_model.column_val_rel"

type simple_row_predicate =
    Column_val string column_val_rel
  options "ocaml.type_equals" = "Obs_data_model.simple_row_predicate"

type row_predicate_and = Satisfy_all [simple_row_predicate]
  options "ocaml.type_equals" = "Obs_data_model.row_predicate_and"

type row_predicate = Satisfy_any [row_predicate_and]
  options "ocaml.type_equals" = "Obs_data_model.row_predicate"

type req = { keyspace : keyspace }

type backup_cursor = string

type rates =
  {
    writes : float; reads : float;
    bytes_wr : float; bytes_rd : float;
    cols_wr : float; cols_rd : float;
    seeks : float; near_seeks : float;
    transactions : float;
  }
  options "ocaml.type_equals" = "Obs_load_stats.rates"

type load_stats_ =
    {
      uptime : float;
      total_writes : long;
      total_reads : long;
      total_bytes_wr : long;
      total_bytes_rd : long;
      total_cols_wr : long;
      total_cols_rd : long;
      total_seeks : long;
      total_near_seeks : long;
      total_transactions : long;
      averages : [(int * rates)];
    }
  options "ocaml.type_equals" = "Obs_load_stats.stats"

(* work around type_equals not being honored in messages *)
message load_stats = load_stats_

type tx_type =
    Repeatable_read
  | Read_committed

type raw_dump_id = long

type raw_dump_mode = Sync | Async | No_stream

type sync_mode = Sync | Async

message request =
    Register_keyspace { name : string; }
  | Get_keyspace { name : string; }
  | List_keyspaces { prefix : string }
  | List_tables { keyspace : keyspace; }
  | Table_size_on_disk { keyspace : keyspace; table : table }
  | Key_range_size_on_disk { keyspace : keyspace; table : table;
                             range : range<string> }
  | Begin { keyspace : keyspace; tx_type : tx_type; sync : sync_mode }
  | Commit { keyspace : keyspace; }
  | Abort { keyspace : keyspace; }
  | Lock { keyspace : keyspace; names : [string]; shared : bool; }
  | Exist_keys { keyspace : keyspace; table : table; keys : [string] }
  | Get_keys { keyspace : keyspace; table : table; max_keys : max_keys;
               key_range : key_range }
  | Count_keys { keyspace : keyspace; table : table;
                 key_range : key_range }
  | Get_slice { keyspace : keyspace; table : table;
                max_keys : max_keys; max_columns : max_columns;
                decode_timestamps : bool; key_range : key_range;
                predicate : opt<row_predicate>;
                column_range : column_range }
  | Get_slice_values { keyspace : keyspace; table : table;
                       max_keys : max_keys; key_range : key_range;
                       columns : [column_name] }
  | Get_slice_values_timestamps
      { keyspace : keyspace; table : table;
        max_keys : max_keys; key_range : key_range;
        columns : [column_name] }
  | Get_columns { keyspace : keyspace; table : table; max_columns : max_columns;
                  decode_timestamps : bool; key : key;
                  column_range : column_range }
  | Get_column_values { keyspace : keyspace; table : table;
                        key : key; columns : [ column_name ] }
  | Get_column { keyspace : keyspace; table : table; key : key;
                 column : column_name; }
  | Put_columns { keyspace : keyspace; table : table;
                  data : [ ( key * [ column_ ]) ] }
  | Delete_columns { keyspace : keyspace; table : table; key : key;
                     columns : [ column_name ] }
  | Delete_key { keyspace : keyspace; table : table; key : key }
  | Dump { keyspace : keyspace; only_tables : opt< [table] >;
           cursor : opt<backup_cursor>; format : opt<int>; }
  | Load { keyspace : keyspace; data : string; }
  | Stats { keyspace : keyspace; }
  | Listen { keyspace : keyspace; topic : string; }
  | Unlisten { keyspace : keyspace; topic : string }
  | Notify { keyspace : keyspace; topic : string; }
  | Await { keyspace : keyspace; }
  | Trigger_raw_dump { mode : raw_dump_mode; }
  | Raw_dump_release { id : raw_dump_id; keep_files : bool; }
  | Raw_dump_list_files { id : raw_dump_id; }
  | Raw_dump_file_digest { id : raw_dump_id; file : string; }
  | Release_keyspace { keyspace : keyspace }
  | Get_property { property : string }
  | Watch_keys { keyspace : keyspace; table : table; keys : [key] }
  | Watch_columns { keyspace : keyspace; table : table; columns : [(key * [column_name])] }
  | Delete_keys { keyspace : keyspace; table: table; key_range : key_range }
  | Watch_prefixes { keyspace : keyspace; table : table; prefixes : [string] }
  | Get_transaction_id { keyspace : keyspace }
  | Listen_prefix { keyspace : keyspace; topic : string; }
  | Unlisten_prefix { keyspace : keyspace; topic : string }
  | Compact_keyspace { keyspace : keyspace }
  | Compact_table { keyspace : keyspace; table : table;
                    from_key : opt<key>; to_key : opt<key> }
  | List_transactions { keyspace : keyspace }
  | Changed_tables { keyspace : keyspace; tx_id : long }

(* vim:set ft=omlet: *) 
